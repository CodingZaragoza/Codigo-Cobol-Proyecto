// Generated by delombok at Tue Jan 14 16:25:34 UTC 2025
package gov.cms.fiss.pricers.fqhc.core.daily;

import gov.cms.fiss.pricers.common.api.annotations.FixedValue;
import java.math.BigDecimal;
import java.time.LocalDate;

public class DaySummary {
  private final LocalDate serviceDate;
  @FixedValue
  private final BigDecimal baseRate;
  @FixedValue
  private final BigDecimal iopRateLte3;
  @FixedValue
  private final BigDecimal iopRateGte4;
  @FixedValue
  private final BigDecimal gafRate;
  @FixedValue
  private final BigDecimal addRate;
  private BigDecimal totalMedicalCharges = BigDecimal.ZERO;
  private BigDecimal totalMentalCharges = BigDecimal.ZERO;
  private BigDecimal totalMod59Charges = BigDecimal.ZERO;
  private BigDecimal totalIopCharges = BigDecimal.ZERO;
  private BigDecimal totalPreventiveCharges = BigDecimal.ZERO;
  private BigDecimal totalCoinsuranceNotApplicablePackageCharges = BigDecimal.ZERO;
  private boolean medicalPaidLinePresent;
  private boolean mentalPaidLinePresent;
  private boolean mod59PaidLinePresent;
  private boolean iopChargesPresent;
  private boolean preventivePresent;
  private boolean coinsuranceNotApplicablePackageLinePresent;
  private boolean otherPackageLinePresent;

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public DaySummary(final LocalDate serviceDate, final BigDecimal baseRate, final BigDecimal iopRateLte3, final BigDecimal iopRateGte4, final BigDecimal gafRate, final BigDecimal addRate) {
    this.serviceDate = serviceDate;
    this.baseRate = baseRate;
    this.iopRateLte3 = iopRateLte3;
    this.iopRateGte4 = iopRateGte4;
    this.gafRate = gafRate;
    this.addRate = addRate;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public LocalDate getServiceDate() {
    return this.serviceDate;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public BigDecimal getBaseRate() {
    return this.baseRate;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public BigDecimal getIopRateLte3() {
    return this.iopRateLte3;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public BigDecimal getIopRateGte4() {
    return this.iopRateGte4;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public BigDecimal getGafRate() {
    return this.gafRate;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public BigDecimal getAddRate() {
    return this.addRate;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public BigDecimal getTotalMedicalCharges() {
    return this.totalMedicalCharges;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public BigDecimal getTotalMentalCharges() {
    return this.totalMentalCharges;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public BigDecimal getTotalMod59Charges() {
    return this.totalMod59Charges;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public BigDecimal getTotalIopCharges() {
    return this.totalIopCharges;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public BigDecimal getTotalPreventiveCharges() {
    return this.totalPreventiveCharges;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public BigDecimal getTotalCoinsuranceNotApplicablePackageCharges() {
    return this.totalCoinsuranceNotApplicablePackageCharges;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public boolean isMedicalPaidLinePresent() {
    return this.medicalPaidLinePresent;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public boolean isMentalPaidLinePresent() {
    return this.mentalPaidLinePresent;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public boolean isMod59PaidLinePresent() {
    return this.mod59PaidLinePresent;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public boolean isIopChargesPresent() {
    return this.iopChargesPresent;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public boolean isPreventivePresent() {
    return this.preventivePresent;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public boolean isCoinsuranceNotApplicablePackageLinePresent() {
    return this.coinsuranceNotApplicablePackageLinePresent;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public boolean isOtherPackageLinePresent() {
    return this.otherPackageLinePresent;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public void setTotalMedicalCharges(final BigDecimal totalMedicalCharges) {
    this.totalMedicalCharges = totalMedicalCharges;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public void setTotalMentalCharges(final BigDecimal totalMentalCharges) {
    this.totalMentalCharges = totalMentalCharges;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public void setTotalMod59Charges(final BigDecimal totalMod59Charges) {
    this.totalMod59Charges = totalMod59Charges;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public void setTotalIopCharges(final BigDecimal totalIopCharges) {
    this.totalIopCharges = totalIopCharges;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public void setTotalPreventiveCharges(final BigDecimal totalPreventiveCharges) {
    this.totalPreventiveCharges = totalPreventiveCharges;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public void setTotalCoinsuranceNotApplicablePackageCharges(final BigDecimal totalCoinsuranceNotApplicablePackageCharges) {
    this.totalCoinsuranceNotApplicablePackageCharges = totalCoinsuranceNotApplicablePackageCharges;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public void setMedicalPaidLinePresent(final boolean medicalPaidLinePresent) {
    this.medicalPaidLinePresent = medicalPaidLinePresent;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public void setMentalPaidLinePresent(final boolean mentalPaidLinePresent) {
    this.mentalPaidLinePresent = mentalPaidLinePresent;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public void setMod59PaidLinePresent(final boolean mod59PaidLinePresent) {
    this.mod59PaidLinePresent = mod59PaidLinePresent;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public void setIopChargesPresent(final boolean iopChargesPresent) {
    this.iopChargesPresent = iopChargesPresent;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public void setPreventivePresent(final boolean preventivePresent) {
    this.preventivePresent = preventivePresent;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public void setCoinsuranceNotApplicablePackageLinePresent(final boolean coinsuranceNotApplicablePackageLinePresent) {
    this.coinsuranceNotApplicablePackageLinePresent = coinsuranceNotApplicablePackageLinePresent;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public void setOtherPackageLinePresent(final boolean otherPackageLinePresent) {
    this.otherPackageLinePresent = otherPackageLinePresent;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public boolean equals(final java.lang.Object o) {
    if (o == this) return true;
    if (!(o instanceof DaySummary)) return false;
    final DaySummary other = (DaySummary) o;
    if (!other.canEqual((java.lang.Object) this)) return false;
    if (this.isMedicalPaidLinePresent() != other.isMedicalPaidLinePresent()) return false;
    if (this.isMentalPaidLinePresent() != other.isMentalPaidLinePresent()) return false;
    if (this.isMod59PaidLinePresent() != other.isMod59PaidLinePresent()) return false;
    if (this.isIopChargesPresent() != other.isIopChargesPresent()) return false;
    if (this.isPreventivePresent() != other.isPreventivePresent()) return false;
    if (this.isCoinsuranceNotApplicablePackageLinePresent() != other.isCoinsuranceNotApplicablePackageLinePresent()) return false;
    if (this.isOtherPackageLinePresent() != other.isOtherPackageLinePresent()) return false;
    final java.lang.Object this$serviceDate = this.getServiceDate();
    final java.lang.Object other$serviceDate = other.getServiceDate();
    if (this$serviceDate == null ? other$serviceDate != null : !this$serviceDate.equals(other$serviceDate)) return false;
    final java.lang.Object this$baseRate = this.getBaseRate();
    final java.lang.Object other$baseRate = other.getBaseRate();
    if (this$baseRate == null ? other$baseRate != null : !this$baseRate.equals(other$baseRate)) return false;
    final java.lang.Object this$iopRateLte3 = this.getIopRateLte3();
    final java.lang.Object other$iopRateLte3 = other.getIopRateLte3();
    if (this$iopRateLte3 == null ? other$iopRateLte3 != null : !this$iopRateLte3.equals(other$iopRateLte3)) return false;
    final java.lang.Object this$iopRateGte4 = this.getIopRateGte4();
    final java.lang.Object other$iopRateGte4 = other.getIopRateGte4();
    if (this$iopRateGte4 == null ? other$iopRateGte4 != null : !this$iopRateGte4.equals(other$iopRateGte4)) return false;
    final java.lang.Object this$gafRate = this.getGafRate();
    final java.lang.Object other$gafRate = other.getGafRate();
    if (this$gafRate == null ? other$gafRate != null : !this$gafRate.equals(other$gafRate)) return false;
    final java.lang.Object this$addRate = this.getAddRate();
    final java.lang.Object other$addRate = other.getAddRate();
    if (this$addRate == null ? other$addRate != null : !this$addRate.equals(other$addRate)) return false;
    final java.lang.Object this$totalMedicalCharges = this.getTotalMedicalCharges();
    final java.lang.Object other$totalMedicalCharges = other.getTotalMedicalCharges();
    if (this$totalMedicalCharges == null ? other$totalMedicalCharges != null : !this$totalMedicalCharges.equals(other$totalMedicalCharges)) return false;
    final java.lang.Object this$totalMentalCharges = this.getTotalMentalCharges();
    final java.lang.Object other$totalMentalCharges = other.getTotalMentalCharges();
    if (this$totalMentalCharges == null ? other$totalMentalCharges != null : !this$totalMentalCharges.equals(other$totalMentalCharges)) return false;
    final java.lang.Object this$totalMod59Charges = this.getTotalMod59Charges();
    final java.lang.Object other$totalMod59Charges = other.getTotalMod59Charges();
    if (this$totalMod59Charges == null ? other$totalMod59Charges != null : !this$totalMod59Charges.equals(other$totalMod59Charges)) return false;
    final java.lang.Object this$totalIopCharges = this.getTotalIopCharges();
    final java.lang.Object other$totalIopCharges = other.getTotalIopCharges();
    if (this$totalIopCharges == null ? other$totalIopCharges != null : !this$totalIopCharges.equals(other$totalIopCharges)) return false;
    final java.lang.Object this$totalPreventiveCharges = this.getTotalPreventiveCharges();
    final java.lang.Object other$totalPreventiveCharges = other.getTotalPreventiveCharges();
    if (this$totalPreventiveCharges == null ? other$totalPreventiveCharges != null : !this$totalPreventiveCharges.equals(other$totalPreventiveCharges)) return false;
    final java.lang.Object this$totalCoinsuranceNotApplicablePackageCharges = this.getTotalCoinsuranceNotApplicablePackageCharges();
    final java.lang.Object other$totalCoinsuranceNotApplicablePackageCharges = other.getTotalCoinsuranceNotApplicablePackageCharges();
    if (this$totalCoinsuranceNotApplicablePackageCharges == null ? other$totalCoinsuranceNotApplicablePackageCharges != null : !this$totalCoinsuranceNotApplicablePackageCharges.equals(other$totalCoinsuranceNotApplicablePackageCharges)) return false;
    return true;
  }

  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  protected boolean canEqual(final java.lang.Object other) {
    return other instanceof DaySummary;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    result = result * PRIME + (this.isMedicalPaidLinePresent() ? 79 : 97);
    result = result * PRIME + (this.isMentalPaidLinePresent() ? 79 : 97);
    result = result * PRIME + (this.isMod59PaidLinePresent() ? 79 : 97);
    result = result * PRIME + (this.isIopChargesPresent() ? 79 : 97);
    result = result * PRIME + (this.isPreventivePresent() ? 79 : 97);
    result = result * PRIME + (this.isCoinsuranceNotApplicablePackageLinePresent() ? 79 : 97);
    result = result * PRIME + (this.isOtherPackageLinePresent() ? 79 : 97);
    final java.lang.Object $serviceDate = this.getServiceDate();
    result = result * PRIME + ($serviceDate == null ? 43 : $serviceDate.hashCode());
    final java.lang.Object $baseRate = this.getBaseRate();
    result = result * PRIME + ($baseRate == null ? 43 : $baseRate.hashCode());
    final java.lang.Object $iopRateLte3 = this.getIopRateLte3();
    result = result * PRIME + ($iopRateLte3 == null ? 43 : $iopRateLte3.hashCode());
    final java.lang.Object $iopRateGte4 = this.getIopRateGte4();
    result = result * PRIME + ($iopRateGte4 == null ? 43 : $iopRateGte4.hashCode());
    final java.lang.Object $gafRate = this.getGafRate();
    result = result * PRIME + ($gafRate == null ? 43 : $gafRate.hashCode());
    final java.lang.Object $addRate = this.getAddRate();
    result = result * PRIME + ($addRate == null ? 43 : $addRate.hashCode());
    final java.lang.Object $totalMedicalCharges = this.getTotalMedicalCharges();
    result = result * PRIME + ($totalMedicalCharges == null ? 43 : $totalMedicalCharges.hashCode());
    final java.lang.Object $totalMentalCharges = this.getTotalMentalCharges();
    result = result * PRIME + ($totalMentalCharges == null ? 43 : $totalMentalCharges.hashCode());
    final java.lang.Object $totalMod59Charges = this.getTotalMod59Charges();
    result = result * PRIME + ($totalMod59Charges == null ? 43 : $totalMod59Charges.hashCode());
    final java.lang.Object $totalIopCharges = this.getTotalIopCharges();
    result = result * PRIME + ($totalIopCharges == null ? 43 : $totalIopCharges.hashCode());
    final java.lang.Object $totalPreventiveCharges = this.getTotalPreventiveCharges();
    result = result * PRIME + ($totalPreventiveCharges == null ? 43 : $totalPreventiveCharges.hashCode());
    final java.lang.Object $totalCoinsuranceNotApplicablePackageCharges = this.getTotalCoinsuranceNotApplicablePackageCharges();
    result = result * PRIME + ($totalCoinsuranceNotApplicablePackageCharges == null ? 43 : $totalCoinsuranceNotApplicablePackageCharges.hashCode());
    return result;
  }

  @java.lang.Override
  @java.lang.SuppressWarnings("all")
  @lombok.Generated
  public java.lang.String toString() {
    return "DaySummary(serviceDate=" + this.getServiceDate() + ", baseRate=" + this.getBaseRate() + ", iopRateLte3=" + this.getIopRateLte3() + ", iopRateGte4=" + this.getIopRateGte4() + ", gafRate=" + this.getGafRate() + ", addRate=" + this.getAddRate() + ", totalMedicalCharges=" + this.getTotalMedicalCharges() + ", totalMentalCharges=" + this.getTotalMentalCharges() + ", totalMod59Charges=" + this.getTotalMod59Charges() + ", totalIopCharges=" + this.getTotalIopCharges() + ", totalPreventiveCharges=" + this.getTotalPreventiveCharges() + ", totalCoinsuranceNotApplicablePackageCharges=" + this.getTotalCoinsuranceNotApplicablePackageCharges() + ", medicalPaidLinePresent=" + this.isMedicalPaidLinePresent() + ", mentalPaidLinePresent=" + this.isMentalPaidLinePresent() + ", mod59PaidLinePresent=" + this.isMod59PaidLinePresent() + ", iopChargesPresent=" + this.isIopChargesPresent() + ", preventivePresent=" + this.isPreventivePresent() + ", coinsuranceNotApplicablePackageLinePresent=" + this.isCoinsuranceNotApplicablePackageLinePresent() + ", otherPackageLinePresent=" + this.isOtherPackageLinePresent() + ")";
  }
}
